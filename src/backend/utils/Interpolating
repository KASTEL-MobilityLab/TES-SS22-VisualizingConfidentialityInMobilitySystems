import { LatLng } from "./LatLng";

// distance between each step in meter
let stepSize = 10;

/**
 * Interpolates a given array of waypoints by adding intermediate steps, so the
 * distance between each waypoints is about even.
 *
 * @param waypoints Array of Waypoints.
 * @returns An array of interpolated Waypoints.
 */
export function interpolate(waypoints: LatLng[]): LatLng[] {
  if (waypoints.length < 2) {
    return waypoints;
  }
  let interpolatedWaypoints: LatLng[];
  interpolatedWaypoints.push(waypoints[0]);
  for (let i = 0; i < waypoints.length - 1; i++) {
    let distance: number = distanceCalculate(waypoints[i], waypoints[i + 1]);
    let stepNumber = Math.round(distance / stepSize);
    interpolatedWaypoints.concat(
      calculateIntermediateSteps(waypoints[i], waypoints[i + 1], stepNumber)
    );
    interpolatedWaypoints.push(waypoints[i + 1]);
  }
  return interpolatedWaypoints;
}

function calculateIntermediateSteps(
  firstWaypoint: LatLng,
  secondWaypoint: LatLng,
  stepNumber: number
): LatLng[] {
  let intermediateSteps: LatLng[];
  for (let i = 1; i < stepNumber; i++) {
    let nextStep: LatLng;
    nextStep.longitude =
      (secondWaypoint.longitude - firstWaypoint.longitude) * (i / stepNumber) +
      firstWaypoint.longitude;
    nextStep.latitude =
      (secondWaypoint.latitude - firstWaypoint.latitude) * (i / stepNumber) +
      firstWaypoint.latitude;
    intermediateSteps.push(nextStep);
  }
  return intermediateSteps;
}

function distanceCalculate(
  firstWaypoint: LatLng,
  secondWaypoint: LatLng
): number {
  let dx: number = 73 * (firstWaypoint.longitude - secondWaypoint.longitude);
  let dy: number = 111.3 * (firstWaypoint.latitude - secondWaypoint.latitude);
  return Math.abs(Math.sqrt(dx * dx + dy * dy) * 1000);
}
