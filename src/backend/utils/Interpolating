import { LatLng } from "./LatLng";

// distance between each step in meter
let stepSize = 10;

export function interpolate(waypoints: LatLng[]): Promise<LatLng[]> {
  let interpolatedWaypoints: LatLng[];
  interpolatedWaypoints.add(waypoints[0]);
  for (let i = 0; i < waypoints.length - 1; i++) {
    let distance: number = distanceCalculate(waypoints[i], waypoints[i + 1]);
    let stepNumber = Math.round(distance / stepSize);
  }
  return interpolatedWaypoints;
}

function calculateIntermediateSteps(
  firstWaypoint: LatLng,
  secondWaypoint: LatLng,
  stepNumber: number
): LatLng[] {
  let intermediateSteps: LatLng[];
  for (let i = 1; i < stepNumber; i++) {
    let nextStep: LatLng;
    nextStep.longitude =
      (firstWaypoint.longitude - secondWaypoint.longitude) /
        (i * (stepNumber - 1)) +
      firstWaypoint.longitude;
    nextStep.latitude =
      (firstWaypoint.latitude - secondWaypoint.latitude) /
        (i * (stepNumber - 1)) +
      firstWaypoint.latitude;
    intermediateSteps.add(nextStep);
  }
  return intermediateSteps;
}

function distanceCalculate(
  firstWaypoint: LatLng,
  secondWaypoint: LatLng
): number {
  let dx: number = 73 * (firstWaypoint.longitude - secondWaypoint.longitude);
  let dy: number = 111.3 * (firstWaypoint.latitude - secondWaypoint.latitude);
  return Math.abs(Math.sqrt(dx * dx + dy * dy) * 1000);
}
